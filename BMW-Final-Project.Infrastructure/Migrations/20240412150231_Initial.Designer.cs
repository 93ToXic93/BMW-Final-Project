// <auto-generated />
using System;
using BMW_Final_Project.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BMW_Final_Project.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240412150231_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab5f19c3-0e66-4a5b-ab4a-ada016abc5c5"),
                            ConcurrencyStamp = "0b741bd9-23c1-4795-9044-d36519a41105",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nickname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5619c008-ca30-4ac1-b972-5ed5d443033a",
                            Email = "Adi@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Adrian",
                            LastName = "Ivanov",
                            LockoutEnabled = true,
                            Nickname = "ToXic",
                            NormalizedEmail = "ADI@GMAIL.COM",
                            NormalizedUserName = "ADI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELvhsa9vz/XEJ2Xvu120Fl7Pju8bDU0BvaE2lciOFeYCiEtpI4x82yGYTFNWVffnZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "521F0041-6A91-41AD-A129-C880D7FBA721",
                            TwoFactorEnabled = false,
                            UserName = "Adi@gmail.com"
                        });
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Accessories.Accessor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Accessor identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Buyer identifier");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(60000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Accessor's image");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Accessor's state");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int")
                        .HasComment("Accessor's type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Accessor's name");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Accessor's price");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("Accessors");

                    b.HasComment("Accessories table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            ImgUrl = "https://www.donbaron.bg/media/catalog/product/cache/1/image/9df78eab33525d08d6e5fb8d27136e95/c/h/chanta-bmw-motorsport1_2_.jpg",
                            IsActive = true,
                            ItemTypeId = 1,
                            Name = "Чанта BMW-MPower",
                            Price = 100m
                        },
                        new
                        {
                            Id = 2,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            ImgUrl = "https://s3.amazonaws.com/rparts-sites/images/285f89b802bcb2651801455c86d78f2a/8093df632b4ba5e7c90265f4c930b311.png",
                            IsActive = true,
                            ItemTypeId = 2,
                            Name = "Флашка BMW-Black",
                            Price = 130m
                        },
                        new
                        {
                            Id = 3,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            ImgUrl = "https://www.igrachka.com/uploads/images/original/motor-injusa-s-bateriya-12v-bmw-r-1250-gs_143611.jpg",
                            IsActive = true,
                            ItemTypeId = 3,
                            Name = "Детско моторче BMW-Black",
                            Price = 330m
                        },
                        new
                        {
                            Id = 4,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            ImgUrl = "https://cdn.shopify.com/s/files/1/0422/5191/1327/files/BMWMMOTORSPORTBOTTLE.jpg?v=1699006337&width=533",
                            IsActive = true,
                            ItemTypeId = 1,
                            Name = "Бутилка BMW",
                            Price = 110m
                        });
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Accessories.AccessorBuyer", b =>
                {
                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Buyer identifier");

                    b.Property<int>("AccessorId")
                        .HasColumnType("int")
                        .HasComment("Accessor identifier");

                    b.HasKey("BuyerId", "AccessorId");

                    b.HasIndex("AccessorId");

                    b.ToTable("AccessorsBuyers");

                    b.HasComment("Accessors and buyers table");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Accessories.ItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("ItemType identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Item type Name");

                    b.HasKey("Id");

                    b.ToTable("ItemTypes");

                    b.HasComment("Item's type table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ежедневни"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Електронни"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Играчки"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Други"
                        });
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Cloth.Cloth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Cloth identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasComment("Cloth amount");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Buyer identifier");

                    b.Property<int>("ClothCollectionId")
                        .HasColumnType("int")
                        .HasComment("Cloth collection identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Cloth description");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(70000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Cloth image");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Cloth status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Cloth name");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Cloth price");

                    b.Property<int>("SizeId")
                        .HasColumnType("int")
                        .HasComment("Size identifier");

                    b.Property<int>("TypePersonId")
                        .HasColumnType("int")
                        .HasComment("TypePerson identifier");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ClothCollectionId");

                    b.HasIndex("SizeId");

                    b.HasIndex("TypePersonId");

                    b.ToTable("Cloths");

                    b.HasComment("Cloth table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            ClothCollectionId = 3,
                            Description = "Тениската е от 100% памук, качеството е гарантирано! Създадена е в Германия и е точната придобивка за лятото.",
                            ImgUrl = "https://bmwaccessories.ie/cdn/shop/products/80145A21737_3.jpg?v=1647336616&width=1445",
                            IsActive = true,
                            Name = "Тениска къс ръкав BMW-GO-SPEED",
                            Price = 60m,
                            SizeId = 3,
                            TypePersonId = 3
                        },
                        new
                        {
                            Id = 2,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            ClothCollectionId = 1,
                            Description = "Якето е кожено и доста леко за вида му пропуска въздух с цел изягване на запотяване, произведено е в Германия.",
                            ImgUrl = "https://www.dhresource.com/webp/m/0x0/f2/albu/g22/M00/41/9D/rBNaEmLG6pGASPeRAABoSHJIjxI746.jpg",
                            IsActive = true,
                            Name = "М-Power Лятно яке",
                            Price = 200m,
                            SizeId = 2,
                            TypePersonId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            ClothCollectionId = 2,
                            Description = "Суитчера е от 100% памук и е доста лек и прохладен за горещото лято, произведен е в Германия.",
                            ImgUrl = "https://images.puma.com/image/upload/f_auto,q_auto,b_rgb:fafafa,w_600,h_600/global/596362/01/fnd/PNA/fmt/png/BMW-M-Motorsport-Women's-Hooded-Sweat-Jacket",
                            IsActive = true,
                            Name = "БМВ Оrigin суитшърт",
                            Price = 100m,
                            SizeId = 1,
                            TypePersonId = 2
                        },
                        new
                        {
                            Id = 4,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            ClothCollectionId = 3,
                            Description = "Тениската е от 100% памук и е доста лека и прохладна за горещото лято, произведена е в Германия.",
                            ImgUrl = "https://i.ebayimg.com/images/g/eCsAAOSwuz5j3pLA/s-l1200.webp",
                            IsActive = true,
                            Name = "БМВ Оrigin Тениска",
                            Price = 120m,
                            SizeId = 2,
                            TypePersonId = 1
                        },
                        new
                        {
                            Id = 5,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            ClothCollectionId = 2,
                            Description = "суитшърта е от 100% памук и е доста лек и прохладен за горещото лято, произведен е в Германия.",
                            ImgUrl = "https://img.fruugo.com/product/0/33/211450330_max.jpg",
                            IsActive = true,
                            Name = "БМВ Оrigin суитшърт",
                            Price = 70m,
                            SizeId = 1,
                            TypePersonId = 2
                        },
                        new
                        {
                            Id = 6,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            ClothCollectionId = 1,
                            Description = "Суитшърта е от 100% памук и е доста лек и прохладен за горещото лято, произведен е в Германия.",
                            ImgUrl = "https://i.pinimg.com/736x/cf/4a/03/cf4a031cad99e38a716ab99407c3cff3.jpg",
                            IsActive = true,
                            Name = "БМВ суитшърт",
                            Price = 100m,
                            SizeId = 5,
                            TypePersonId = 1
                        },
                        new
                        {
                            Id = 7,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            ClothCollectionId = 3,
                            Description = "Панталона е от 100% памук и е доста лек и прохладен за горещото лято, произведен е в Германия.",
                            ImgUrl = "https://webshop.motos-inghelbrecht.be/cdn/shop/files/bmw-motorbroek-aravisair-blauw.jpg?v=1705495106",
                            IsActive = true,
                            Name = "БМВ Панталон",
                            Price = 100m,
                            SizeId = 4,
                            TypePersonId = 1
                        });
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Cloth.ClothBuyer", b =>
                {
                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Buyer identifier");

                    b.Property<int>("ClothId")
                        .HasColumnType("int")
                        .HasComment("Cloth identifier");

                    b.HasKey("BuyerId", "ClothId");

                    b.HasIndex("ClothId");

                    b.ToTable("ClothsBuyers");

                    b.HasComment("Cloth and buyers");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Cloth.ClothCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Collection identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Collection Name");

                    b.HasKey("Id");

                    b.ToTable("ClothCollections");

                    b.HasComment("Season cloth collections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Зимна колекция"
                        },
                        new
                        {
                            Id = 2,
                            Name = "БМВ Origin колекция"
                        },
                        new
                        {
                            Id = 3,
                            Name = "M-Колекция"
                        });
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Cloth.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Size identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Size");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasComment("Size table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "XS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "S"
                        },
                        new
                        {
                            Id = 3,
                            Name = "M"
                        },
                        new
                        {
                            Id = 4,
                            Name = "L"
                        },
                        new
                        {
                            Id = 5,
                            Name = "XL"
                        },
                        new
                        {
                            Id = 6,
                            Name = "XXL"
                        },
                        new
                        {
                            Id = 7,
                            Name = "XXXL"
                        });
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Cloth.TypePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("TypePerson identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("TypePerson type");

                    b.HasKey("Id");

                    b.ToTable("TypesPersons");

                    b.HasComment("TypePerson's table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Мъже"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Жени"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Деца"
                        });
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Event.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Event identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description of the event");

                    b.Property<DateTime>("EndEvent")
                        .HasColumnType("datetime2")
                        .HasComment("End date of the event");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(60000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("JoinerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Joiner identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the event");

                    b.Property<string>("PlaceOfTheEvent")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Place date of the event");

                    b.Property<DateTime>("StartEvent")
                        .HasColumnType("datetime2")
                        .HasComment("Start date of the event");

                    b.HasKey("Id");

                    b.HasIndex("JoinerId");

                    b.ToTable("Events");

                    b.HasComment("Cloth table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Тази година само с BMW ,събитието ще бъде неповторимо, което не трябва да изпускате. Ще има стънт програма и екслузивни мотори. ЗАПОВЯДАЙТЕ!",
                            EndEvent = new DateTime(2024, 2, 3, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            ImgUrl = "https://www.bmw-motorrad.com/content/dam/bmwmotorradnsc/marketCORECOM/common/images/experience/stories/brand/bmd-2023/youtube/nsc-bmd-2023-youtube-fallback.jpg.asset.1675938793795.jpg",
                            IsActive = true,
                            JoinerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            Name = "BMW SPORT EVENT",
                            PlaceOfTheEvent = "София, BMW-България",
                            StartEvent = new DateTime(2024, 2, 2, 13, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Тази година, BMW събитието ще бъде неповторимо, което не трябва да изпускате. Ще има стънт програма и екслузивни мотори.Това е 100-годишнината на BMW и желаем да поканим възможно повече хора! ЗАПОВЯДАЙТЕ!",
                            EndEvent = new DateTime(2024, 1, 30, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            ImgUrl = "https://i.ytimg.com/vi/2t-m6cuPUqI/maxresdefault.jpg",
                            IsActive = true,
                            JoinerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            Name = "BMW Anniversary",
                            PlaceOfTheEvent = "София, BMW-България",
                            StartEvent = new DateTime(2024, 1, 29, 12, 45, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "BMW - Откриване на сезона, желаем да Ви поканим да открием новият сезон с яркост и красота с нашите нови модели. ЗАПОВЯДАЙТЕ!",
                            EndEvent = new DateTime(2024, 4, 13, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            ImgUrl = "https://c.ndtvimg.com/2020-09/9e7k4g2g_bmw-motorrad-days_625x300_18_September_20.jpg",
                            IsActive = true,
                            JoinerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            Name = "BMW new season",
                            PlaceOfTheEvent = "София, BMW-България",
                            StartEvent = new DateTime(2024, 4, 12, 11, 45, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Event.EventJoiners", b =>
                {
                    b.Property<Guid>("JoinerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Joiner identifier");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasComment("Event identifier");

                    b.HasKey("JoinerId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventsJoiners");

                    b.HasComment("Events and joiners");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Motorcycle.ColorCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Color identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Color ad status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Color Name");

                    b.HasKey("Id");

                    b.ToTable("ColorCategories");

                    b.HasComment("Color Table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Черен"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Бял"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "Червен"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "Жълт"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "Лилав"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            Name = "Бордо"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            Name = "Светло-син"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            Name = "Светло-жълт"
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            Name = "Светло-лилав"
                        },
                        new
                        {
                            Id = 10,
                            IsActive = true,
                            Name = "Зелен"
                        },
                        new
                        {
                            Id = 11,
                            IsActive = true,
                            Name = "Оранжев"
                        });
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Motorcycle.Motorcycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Motorcycle identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasComment("Motorcycle amount");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Buyer identifier");

                    b.Property<int>("CC")
                        .HasColumnType("int")
                        .HasComment("Engine displacement");

                    b.Property<int>("ColorCategoryId")
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    b.Property<string>("DTC")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Motorcycle dynamic traction control");

                    b.Property<string>("FrontBreak")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Motorcycle front brake model");

                    b.Property<int>("HorsePowers")
                        .HasColumnType("int")
                        .HasComment("Motorcycle horse powers");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(70000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Motorcycle photo");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Motorcycle ad status");

                    b.Property<int>("Kg")
                        .HasColumnType("int")
                        .HasComment("Motorcycle weight");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Motorcycle model");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Motorcycle price");

                    b.Property<string>("RearBreak")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Motorcycle rear brake model");

                    b.Property<int>("SeatHeightMm")
                        .HasColumnType("int")
                        .HasComment("Motorcycle seat height in mm");

                    b.Property<int>("StandardEuroId")
                        .HasColumnType("int")
                        .HasComment("Motorcycle euro standard identifier");

                    b.Property<int>("TankCapacity")
                        .HasColumnType("int")
                        .HasComment("Motorcycle tank capacity");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Motorcycle transmission box");

                    b.Property<int>("TypeMotorId")
                        .HasColumnType("int")
                        .HasComment("Motorcycle Type identifier");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2")
                        .HasComment("Motorcycle bought date and time");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ColorCategoryId");

                    b.HasIndex("StandardEuroId");

                    b.HasIndex("TypeMotorId");

                    b.ToTable("Motorcycles");

                    b.HasComment("Motorcycles table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            CC = 1000,
                            ColorCategoryId = 1,
                            DTC = "BMW own Dynamic Traction Control specified for this unique bike",
                            FrontBreak = "BMW own Front Brake Control specified for this unique bike",
                            HorsePowers = 205,
                            ImageUrl = "https://images4.alphacoders.com/127/1277784.jpg",
                            IsActive = true,
                            Kg = 197,
                            Model = "BMW S1000RR",
                            Price = 62000m,
                            RearBreak = "BMW own Rear Brake Control specified for this unique bike",
                            SeatHeightMm = 705,
                            StandardEuroId = 3,
                            TankCapacity = 21,
                            Transmission = "BMW 6-Gears transmission",
                            TypeMotorId = 1,
                            Year = new DateTime(2024, 4, 12, 18, 2, 31, 65, DateTimeKind.Local).AddTicks(7008)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            CC = 900,
                            ColorCategoryId = 1,
                            DTC = "BMW own Dynamic Traction Control specified for this unique bike",
                            FrontBreak = "BMW own Front Brake Control specified for this unique bike",
                            HorsePowers = 105,
                            ImageUrl = "https://storage.edidomus.it/dueruote/nuovo/850/lat1586861045333.jpg",
                            IsActive = true,
                            Kg = 210,
                            Model = "BMW F900R",
                            Price = 32000m,
                            RearBreak = "BMW own Rear Brake Control specified for this unique bike",
                            SeatHeightMm = 705,
                            StandardEuroId = 3,
                            TankCapacity = 16,
                            Transmission = "BMW 6-Gears transmission",
                            TypeMotorId = 4,
                            Year = new DateTime(2024, 4, 12, 18, 2, 31, 65, DateTimeKind.Local).AddTicks(7047)
                        },
                        new
                        {
                            Id = 3,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            CC = 100,
                            ColorCategoryId = 1,
                            DTC = "BMW own Dynamic Traction Control specified for this unique bike",
                            FrontBreak = "BMW own Front Brake Control specified for this unique bike",
                            HorsePowers = 225,
                            ImageUrl = "https://www.procycles.com.au/cdn/shop/files/2023-BMW-M-1000-RR_-16-1024x724.jpg?v=1689145146",
                            IsActive = true,
                            Kg = 190,
                            Model = "BMW M1000RR",
                            Price = 82000m,
                            RearBreak = "BMW own Rear Brake Control specified for this unique bike",
                            SeatHeightMm = 665,
                            StandardEuroId = 3,
                            TankCapacity = 21,
                            Transmission = "BMW 6-Gears transmission",
                            TypeMotorId = 2,
                            Year = new DateTime(2024, 4, 12, 18, 2, 31, 65, DateTimeKind.Local).AddTicks(7052)
                        },
                        new
                        {
                            Id = 5,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            CC = 100,
                            ColorCategoryId = 1,
                            DTC = "BMW own Dynamic Traction Control specified for this unique bike",
                            FrontBreak = "BMW own Front Brake Control specified for this unique bike",
                            HorsePowers = 225,
                            ImageUrl = "https://www.bavarianmc.co.za/files/bike/22767/img_20240205160754.jpg",
                            IsActive = true,
                            Kg = 190,
                            Model = "BMW F800R",
                            Price = 82000m,
                            RearBreak = "BMW own Rear Brake Control specified for this unique bike",
                            SeatHeightMm = 665,
                            StandardEuroId = 3,
                            TankCapacity = 21,
                            Transmission = "BMW 6-Gears transmission",
                            TypeMotorId = 3,
                            Year = new DateTime(2024, 4, 12, 18, 2, 31, 65, DateTimeKind.Local).AddTicks(7055)
                        },
                        new
                        {
                            Id = 6,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            CC = 100,
                            ColorCategoryId = 1,
                            DTC = "BMW own Dynamic Traction Control specified for this unique bike",
                            FrontBreak = "BMW own Front Brake Control specified for this unique bike",
                            HorsePowers = 225,
                            ImageUrl = "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgIT2nOwQjqBRnWlaEFM8TWukwdyvwvGoWtqhfRxAh2-lTgX1EH_l689He3V3mEj_vQQ1Dk0WK7JET62OW-THslCCRxTvn13NKzxRa6XwwM2yi-KAKY3qVeNfjLnoIB6zpA0cH2MFT4Ue7fQTc1NePPzIfcYZIB0beSzdhzY1THSaUq8sAYpOXLhjgA7A/s1074/2023-BMW-R-nineT-100-Years-and-R18-100-Years.jpg",
                            IsActive = true,
                            Kg = 190,
                            Model = "BMW RNineT",
                            Price = 82000m,
                            RearBreak = "BMW own Rear Brake Control specified for this unique bike",
                            SeatHeightMm = 665,
                            StandardEuroId = 3,
                            TankCapacity = 21,
                            Transmission = "BMW 6-Gears transmission",
                            TypeMotorId = 5,
                            Year = new DateTime(2024, 4, 12, 18, 2, 31, 65, DateTimeKind.Local).AddTicks(7058)
                        },
                        new
                        {
                            Id = 7,
                            Amount = 20,
                            BuyerId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            CC = 100,
                            ColorCategoryId = 1,
                            DTC = "BMW own Dynamic Traction Control specified for this unique bike",
                            FrontBreak = "BMW own Front Brake Control specified for this unique bike",
                            HorsePowers = 225,
                            ImageUrl = "https://cdn.dealerspike.com/imglib/v1/800x600/imglib/trimsdb/17432641-0-110420261.jpg",
                            IsActive = true,
                            Kg = 190,
                            Model = "BMW R1250GS",
                            Price = 82000m,
                            RearBreak = "BMW own Rear Brake Control specified for this unique bike",
                            SeatHeightMm = 665,
                            StandardEuroId = 3,
                            TankCapacity = 21,
                            Transmission = "BMW 6-Gears transmission",
                            TypeMotorId = 6,
                            Year = new DateTime(2024, 4, 12, 18, 2, 31, 65, DateTimeKind.Local).AddTicks(7062)
                        });
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Motorcycle.MotorcycleBuyers", b =>
                {
                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Buyer identifier");

                    b.Property<int>("MotorcycleId")
                        .HasColumnType("int")
                        .HasComment("Motorcycle identifier");

                    b.HasKey("BuyerId", "MotorcycleId");

                    b.HasIndex("MotorcycleId");

                    b.ToTable("MotorcyclesBuyers");

                    b.HasComment("Motorcycles and buyers");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Motorcycle.StandardEuro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Euro standard identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasComment("Standard euro category");

                    b.HasKey("Id");

                    b.ToTable("StandardEuros");

                    b.HasComment("Euro standard table");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Евро-1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Евро-2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Евро-3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Евро-4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Евро-5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Евро-6"
                        });
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Motorcycle.TypeMotor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Type identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Type name");

                    b.HasKey("Id");

                    b.ToTable("TypeMotor");

                    b.HasComment("Type of the motorcycle");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 2,
                            Name = "M"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tour"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Roadster"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Heritage"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Urban Mobility"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("32b13a0b-6546-439e-a40d-4880e8a4e0a9"),
                            RoleId = new Guid("ab5f19c3-0e66-4a5b-ab4a-ada016abc5c5")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Accessories.Accessor", b =>
                {
                    b.HasOne("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationUser", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMW_Final_Project.Infrastructure.Data.Models.Accessories.ItemType", "ItemType")
                        .WithMany("Accessories")
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Accessories.AccessorBuyer", b =>
                {
                    b.HasOne("BMW_Final_Project.Infrastructure.Data.Models.Accessories.Accessor", "Accessor")
                        .WithMany("AccessorBuyers")
                        .HasForeignKey("AccessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationUser", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accessor");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Cloth.Cloth", b =>
                {
                    b.HasOne("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationUser", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMW_Final_Project.Infrastructure.Data.Models.Cloth.ClothCollection", "ClothCollection")
                        .WithMany("Cloths")
                        .HasForeignKey("ClothCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMW_Final_Project.Infrastructure.Data.Models.Cloth.Size", "Size")
                        .WithMany("Cloths")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMW_Final_Project.Infrastructure.Data.Models.Cloth.TypePerson", "TypePerson")
                        .WithMany("Cloths")
                        .HasForeignKey("TypePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("ClothCollection");

                    b.Navigation("Size");

                    b.Navigation("TypePerson");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Cloth.ClothBuyer", b =>
                {
                    b.HasOne("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationUser", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BMW_Final_Project.Infrastructure.Data.Models.Cloth.Cloth", "Cloth")
                        .WithMany("ClothBuyers")
                        .HasForeignKey("ClothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Cloth");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Event.Event", b =>
                {
                    b.HasOne("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationUser", "Joiner")
                        .WithMany()
                        .HasForeignKey("JoinerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Joiner");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Event.EventJoiners", b =>
                {
                    b.HasOne("BMW_Final_Project.Infrastructure.Data.Models.Event.Event", "Event")
                        .WithMany("EventsJoiners")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationUser", "Joiner")
                        .WithMany()
                        .HasForeignKey("JoinerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Joiner");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Motorcycle.Motorcycle", b =>
                {
                    b.HasOne("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationUser", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMW_Final_Project.Infrastructure.Data.Models.Motorcycle.ColorCategory", "ColorCategory")
                        .WithMany("Motorcycles")
                        .HasForeignKey("ColorCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMW_Final_Project.Infrastructure.Data.Models.Motorcycle.StandardEuro", "StandardEuro")
                        .WithMany("Motorcycles")
                        .HasForeignKey("StandardEuroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMW_Final_Project.Infrastructure.Data.Models.Motorcycle.TypeMotor", "TypeMotor")
                        .WithMany("Motorcycles")
                        .HasForeignKey("TypeMotorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("ColorCategory");

                    b.Navigation("StandardEuro");

                    b.Navigation("TypeMotor");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Motorcycle.MotorcycleBuyers", b =>
                {
                    b.HasOne("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationUser", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BMW_Final_Project.Infrastructure.Data.Models.Motorcycle.Motorcycle", "Motorcycle")
                        .WithMany("MotorcycleBuyers")
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BMW_Final_Project.Infrastructure.Data.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Accessories.Accessor", b =>
                {
                    b.Navigation("AccessorBuyers");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Accessories.ItemType", b =>
                {
                    b.Navigation("Accessories");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Cloth.Cloth", b =>
                {
                    b.Navigation("ClothBuyers");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Cloth.ClothCollection", b =>
                {
                    b.Navigation("Cloths");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Cloth.Size", b =>
                {
                    b.Navigation("Cloths");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Cloth.TypePerson", b =>
                {
                    b.Navigation("Cloths");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Event.Event", b =>
                {
                    b.Navigation("EventsJoiners");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Motorcycle.ColorCategory", b =>
                {
                    b.Navigation("Motorcycles");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Motorcycle.Motorcycle", b =>
                {
                    b.Navigation("MotorcycleBuyers");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Motorcycle.StandardEuro", b =>
                {
                    b.Navigation("Motorcycles");
                });

            modelBuilder.Entity("BMW_Final_Project.Infrastructure.Data.Models.Motorcycle.TypeMotor", b =>
                {
                    b.Navigation("Motorcycles");
                });
#pragma warning restore 612, 618
        }
    }
}
